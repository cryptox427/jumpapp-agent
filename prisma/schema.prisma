// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                      String  @id @default(cuid())
  userId                  String
  type                    String
  provider                String
  providerAccountId       String
  refresh_token           String?
  access_token            String?
  expires_at              Int?
  token_type              String?
  scope                   String?
  id_token                String?
  session_state           String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User-specific data
  googleTokens  GoogleTokens?
  hubspotTokens HubspotTokens?
  tasks         Task[]
  instructions  Instruction[]
  conversations Conversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GoogleTokens {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken   String
  refreshToken  String?
  expiresAt     DateTime
  scope         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model HubspotTokens {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken   String
  refreshToken  String?
  expiresAt     DateTime
  scope         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Task {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  status      TaskStatus  @default(PENDING)
  type        TaskType
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // For multi-step tasks
  currentStep Int         @default(0)
  totalSteps  Int         @default(1)
  stepData    Json?
}

model Instruction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  instruction String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String?
  messages  Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           MessageRole
  content        String
  metadata       Json?
  createdAt      DateTime @default(now())
}

// RAG Data Models
model EmailData {
  id            String   @id @default(cuid())
  userId        String
  messageId     String   @unique
  threadId      String
  subject       String
  sender        String
  recipient     String
  body          String
  date          DateTime
  labels        String
  embedding     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model HubspotContact {
  id          String   @id @default(cuid())
  userId      String
  contactId   String   @unique
  email       String?
  firstName   String?
  lastName    String?
  company     String?
  phone       String?
  notes       String
  properties  Json?
  embedding   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HubspotNote {
  id          String   @id @default(cuid())
  userId      String
  noteId      String   @unique
  contactId   String
  content     String
  createdAt   DateTime @default(now())
  embedding   String?
}

model MeetingData {
  id          String   @id @default(cuid())
  userId      String
  eventId     String   @unique
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  attendees   Json?
  location    String?
  meetingType String?
  notes       String?
  embedding   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WebhookEvent {
  id        String   @id @default(cuid())
  type      String
  userId    String
  data      Json
  timestamp DateTime @default(now())
  processed Boolean  @default(false)
}

model AutomationRule {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String
  trigger     Json
  actions     Json
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AutomationExecution {
  id        String   @id @default(cuid())
  ruleId    String
  eventId   String
  userId    String
  status    String
  error     String?
  executedAt DateTime @default(now())
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum TaskType {
  EMAIL
  CALENDAR
  HUBSPOT
  GENERAL
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
